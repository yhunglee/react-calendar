{"version":3,"sources":["components/Calendar/NavigationBar/NavigationBar.tsx","components/Calendar/DateView/DateView.tsx","components/Calendar/MonthView/MonthView.tsx","components/Calendar/YearView/YearView.tsx","components/Calendar/index.tsx","components/Calendar/Calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["infoActionStyle","css","NavigationBar","prevAct","nextAct","info","setPrevView","className","onClick","DateView","viewDate","selectedDate","toSelectDate","today","setNextView","currentView","containerStyle","dayOfWeekStyle","year","undefined","getFullYear","Date","month","getMonth","useState","Intl","DateTimeFormat","format","nowDay","handleClick","event","currentTarget","getAttribute","replaceAll","nodeAry","firstDate","calcDate","calcStartDate","numOfDayOfWeek","day","calcYear","first2DigitYear","parseInt","toString","substr","last2DigitYear","calcMonth","Math","floor","genDayOfWeek","i","setDate","getDate","unshift","pickDate","push","data-tag","j","length","genDayNodeAry","MonthView","setViewDateByMonth","monthListStyle","map","elem","idx","YearView","setViewDateByYear","yearListStyle","prevYearQuotient","prevYear","startYear","genYearNodeAry","MyCalendar","Calendar","date","onSelect","setViewDate","setSelectedDate","setCurrentView","currView","useEffect","setFullYear","setMonth","toLocaleString","val","App","type","onChange","e","target","value","pattern","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71263b4a.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\n\nimport React from \"react\";\nimport { css } from \"@emotion/react\";\nimport { NavigateAction } from \"../types/NavigateActType\";\n\nconst infoActionStyle = css`\n  display: flex;\n  justify-content: space-around;\n\n  .action {\n    display: inline-block;\n    padding: 0.5rem;\n\n    &:hover {\n      cursor: pointer;\n    }\n  }\n\n  .show-info {\n    padding: 0.5rem;\n\n    &:hover {\n      cursor: pointer;\n      background-color: #ccc;\n    }\n  }\n`;\n\nexport const NavigationBar: React.VFC<NavigateAction> = ({\n  prevAct,\n  nextAct,\n  info,\n  setPrevView,\n}) => {\n  return (\n    <div className=\"info-action-bar\" css={infoActionStyle}>\n      <span className=\"prev action\" onClick={() => prevAct()}>\n        &lt;\n      </span>\n\n      <div className=\"show-info\" onClick={() => setPrevView(\"MONTH_VIEW\")}>\n        {info}\n      </div>\n      <span className=\"next action\" onClick={() => nextAct()}>\n        &gt;\n      </span>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\n\nimport { css } from \"@emotion/react\";\nimport { useState } from \"react\";\nimport { NavigationBar } from \"../NavigationBar/NavigationBar\";\nimport { NavigateAction } from \"../types/NavigateActType\";\nimport { SelectDateType } from \"../types/SelectDateType\";\n\nexport const DateView: React.VFC<NavigateAction & SelectDateType> = ({\n  prevAct,\n  nextAct,\n  info,\n  viewDate,\n  selectedDate,\n  toSelectDate,\n  today,\n  setPrevView,\n  setNextView,\n  currentView,\n}) => {\n  const containerStyle = css`\n    width: 230px;\n    display: ${currentView === \"DATE_VIEW\" ? \"block\" : \"none\"};\n  `;\n  const dayOfWeekStyle = css`\n    display: ${currentView === \"DATE_VIEW\" ? \"flex\" : \"none\"};\n    margin: auto 1rem;\n    flex-wrap: wrap;\n\n    > .element {\n      margin-left: 0.25rem;\n      margin-right: 0.25rem;\n      width: 20px;\n      border-radius: 50%;\n      text-align: center;\n\n      &.out-of-range {\n        color: #aaa;\n      }\n\n      &:not(.out-of-range):hover {\n        cursor: pointer;\n        background-color: #ccc;\n      }\n\n      &.today {\n        color: #db3d44;\n      }\n\n      &.picked {\n        background-color: #db3d44;\n        color: #fff;\n      }\n    }\n\n    > .name {\n      font-weight: bold;\n    }\n  `;\n\n  let year =\n    viewDate !== undefined ? viewDate.getFullYear() : new Date().getFullYear();\n  let month =\n    viewDate !== undefined ? viewDate.getMonth() : new Date().getMonth(); // range: 0 ~ 11\n\n  let [nowDay] = useState(Intl.DateTimeFormat(\"fr-CA\").format(today));\n\n  function handleClick(event: React.MouseEvent<HTMLElement>) {\n    // 藉由 parent component 傳下來的選擇日期函式，設定已選擇日期\n    toSelectDate(\n      new Date(\n        event.currentTarget.getAttribute(\"data-tag\")?.replaceAll(\"-\", \"/\") + \"\"\n      )\n    );\n\n    // 設定要切換到哪個畫面\n    setNextView(\"DATE_VIEW\");\n  }\n\n  /**\n   * 用 Gaussian algorithm 得知 日期幾年幾月幾號 是一週的第幾天\n   *\n   * https://calendars.wikia.org/wiki/Calculating_the_day_of_the_week\n   */\n  function genDayOfWeek(year: number, month: number, day: number) {\n    let numOfDay = -1;\n    let calcYear = month > 1 ? year : year - 1;\n\n    let first2DigitYear = parseInt(calcYear.toString().substr(0, 2), 10);\n    let last2DigitYear = parseInt(calcYear.toString().substr(2, 2), 10);\n    let calcMonth = ((month + 10) % 12) + 1; // 因為 month 用 Date constructor 的 monthIndex ，所以從 +9 變成 +10\n\n    numOfDay =\n      (((day +\n        Math.floor(2.6 * calcMonth - 0.2) +\n        last2DigitYear +\n        Math.floor(last2DigitYear / 4) +\n        Math.floor(first2DigitYear / 4) -\n        2 * first2DigitYear) %\n        7) +\n        7) %\n      7; // Notice: modulo 7 的過程已經轉換過負數\n    return numOfDay;\n  }\n\n  /**\n   * 產生日期的節點陣列，陣列必須包含 42 個\n   */\n  function genDayNodeAry() {\n    const nodeAry = [];\n\n    let firstDate = new Date(year, month, 1);\n\n    let calcDate = new Date(firstDate);\n\n    let calcStartDate = new Date(firstDate);\n\n    let numOfDayOfWeek = genDayOfWeek(year, month, 1),\n      i = 0;\n\n    while (i < numOfDayOfWeek) {\n      calcStartDate.setDate(calcStartDate.getDate() - 1);\n      nodeAry.unshift(\n        <div\n          className=\"element out-of-range\"\n          key={\n            calcStartDate.getFullYear() +\n            \"-\" +\n            calcStartDate.getMonth() +\n            \"-\" +\n            calcStartDate.getDate()\n          }\n        >\n          {calcStartDate.getDate()}\n        </div>\n      );\n      i++;\n    } // 產生 1號之前的資料\n\n    while (true) {\n      if (calcDate.getMonth() === month) {\n        let pickDate = Intl.DateTimeFormat(\"fr-CA\").format(calcDate);\n\n        nodeAry.push(\n          <div\n            className={`element ${pickDate === selectedDate ? \"picked\" : \"\"}\n            ${pickDate === nowDay ? \"today\" : \"\"} `}\n            key={\n              calcDate.getFullYear() +\n              \"-\" +\n              calcDate.getMonth() +\n              \"-\" +\n              calcDate.getDate()\n            }\n            data-tag={pickDate}\n            onClick={handleClick}\n          >\n            {calcDate.getDate()}\n          </div>\n        );\n        calcDate.setDate(1 + calcDate.getDate());\n      } else {\n        /**\n         * 因為已經換月，所以要跳出這個無窮回圈\n         */\n\n        break;\n      }\n    } // 產生一個月的資料\n\n    for (let j = nodeAry.length; j < 42; j++) {\n      nodeAry.push(\n        <div\n          className=\"element out-of-range\"\n          key={\n            calcDate.getFullYear() +\n            \"-\" +\n            calcDate.getMonth() +\n            \"-\" +\n            calcDate.getDate()\n          }\n        >\n          {calcDate.getDate()}\n        </div>\n      );\n      calcDate.setDate(1 + calcDate.getDate());\n    } // 產生一個月後的資料，目的是填滿數量到 42 個\n\n    return nodeAry;\n  }\n\n  return (\n    <div className=\"container\" css={containerStyle}>\n      <NavigationBar\n        prevAct={prevAct}\n        nextAct={nextAct}\n        info={info}\n        setPrevView={() => setPrevView(\"DATE_VIEW\")}\n        currentView={currentView}\n      />\n\n      <div className=\"day-name-of-week\" css={dayOfWeekStyle}>\n        <div className=\"element name\">Su</div>\n        <div className=\"element name\">Mo</div>\n        <div className=\"element name\">Tu</div>\n        <div className=\"element name\">We</div>\n        <div className=\"element name\">Th</div>\n        <div className=\"element name\">Fr</div>\n        <div className=\"element name\">Sa</div>\n      </div>\n\n      <div className=\"row day\" css={dayOfWeekStyle}>\n        {genDayNodeAry()}\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { NavigationBar } from \"../NavigationBar/NavigationBar\";\nimport { NavigateAction } from \"../types/NavigateActType\";\nimport { SelectMonthType } from \"../types/SelectMonthType\";\n\nexport const MonthView: React.VFC<NavigateAction & SelectMonthType> = ({\n  prevAct,\n  nextAct,\n  info,\n  selectedDate,\n  setPrevView,\n  setNextView,\n  currentView,\n  setViewDateByMonth,\n}) => {\n  const containerStyle = css`\n    width: 230px;\n    display: ${currentView === \"MONTH_VIEW\" ? \"block\" : \"none\"};\n  `;\n\n  const monthListStyle = css`\n    display: ${currentView === \"MONTH_VIEW\" ? \"flex\" : \"none\"};\n    margin: auto 1rem;\n    flex-wrap: wrap;\n\n    > .element {\n      width: fit-content;\n      padding: 0.5rem;\n      margin: auto;\n      border-radius: 50%;\n\n      &:hover {\n        cursor: pointer;\n        background-color: #ccc;\n      }\n\n      &.picked {\n        background-color: #db3d44;\n        color: #fff;\n      }\n    }\n  `;\n\n  let monthList = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  return (\n    <div className=\"container\" css={containerStyle}>\n      <NavigationBar\n        prevAct={prevAct}\n        nextAct={nextAct}\n        info={info}\n        setPrevView={() => setPrevView(\"MONTH_VIEW\")}\n        currentView={currentView}\n      />\n\n      <div className=\"month-list\" css={monthListStyle}>\n        {monthList.map((elem, idx) => {\n          return (\n            <div\n              className={`element ${\n                selectedDate !== undefined &&\n                selectedDate instanceof Date &&\n                selectedDate.getFullYear() === parseInt(info, 10) &&\n                selectedDate.getMonth() === idx\n                  ? \"picked\"\n                  : \"\"\n              }`}\n              key={idx}\n              onClick={() => {\n                // 表達現在是什麼頁面，下一站依照條件要前往哪一個頁面\n                setNextView(\"MONTH_VIEW\");\n\n                // 依照選定的月份，去設定觀看畫面的日期\n                setViewDateByMonth(idx);\n              }}\n            >\n              {elem}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { NavigationBar } from \"../NavigationBar/NavigationBar\";\nimport { NavigateAction } from \"../types/NavigateActType\";\nimport { SelectYearType } from \"../types/SelectYearType\";\n\nexport const YearView: React.VFC<NavigateAction & SelectYearType> = ({\n  prevAct,\n  nextAct,\n  viewDate,\n  selectedDate,\n  setPrevView,\n  setNextView,\n  currentView,\n  setViewDateByYear,\n}) => {\n  const containerStyle = css`\n    width: 230px;\n    display: ${currentView === \"YEAR_VIEW\" ? \"block\" : \"none\"};\n  `;\n\n  const yearListStyle = css`\n    display: ${currentView === \"YEAR_VIEW\" ? \"flex\" : \"none\"};\n    margin: auto 1rem;\n    flex-wrap: wrap;\n\n    > .element {\n      width: fit-content;\n      padding: 0.5rem;\n      margin: auto;\n      border-radius: 50%;\n\n      &.out-of-range {\n        color: #aaa;\n      }\n\n      &:not(.out-of-range):hover {\n        cursor: pointer;\n        background-color: #ccc;\n      }\n\n      &.picked {\n        background-color: #db3d44;\n        color: #fff;\n      }\n    }\n  `;\n\n  let year =\n    viewDate !== undefined ? viewDate.getFullYear() : new Date().getFullYear();\n  let prevYearQuotient = Math.floor(year / 10) - 1;\n  let prevYear = Math.floor(prevYearQuotient * 10) + 9;\n  let startYear = prevYear + 1;\n\n  function genYearNodeAry() {\n    const nodeAry = [];\n    let i = -1;\n\n    // 產生 一個 十位數前於本範圍的年份\n    nodeAry.push(\n      <div className=\"element out-of-range\" key={prevYear}>\n        {prevYear}\n      </div>\n    );\n    i++;\n\n    // 產生十個本範圍的年份\n    for (i = 0; i < 10; i++) {\n      nodeAry.push(\n        <div\n          className={`element ${\n            selectedDate !== undefined &&\n            selectedDate instanceof Date &&\n            selectedDate.getFullYear() === startYear + i\n              ? \"picked\"\n              : \"\"\n          }`}\n          key={startYear + i}\n          data-tag={startYear + i}\n          onClick={(event) => {\n            // 表達現在是什麼頁面，下一站依照條件要前往哪一個頁面\n            setNextView(\"YEAR_VIEW\");\n\n            // 依照選定的月份，去設定觀看畫面的日期\n            setViewDateByYear(event.currentTarget.getAttribute(\"data-tag\"));\n          }}\n        >\n          {startYear + i}\n        </div>\n      );\n    }\n\n    // 產生一個 後於本範圍的年份\n    nodeAry.push(\n      <div className=\"element out-of-range\" key={startYear + i}>\n        {startYear + i}\n      </div>\n    );\n\n    return nodeAry;\n  }\n\n  return (\n    <div className=\"container\" css={containerStyle}>\n      <NavigationBar\n        prevAct={prevAct}\n        nextAct={nextAct}\n        // info={info}\n        info={`${startYear} - ${startYear + 9}`}\n        setPrevView={() => setPrevView(\"YEAR_VIEW\")}\n        currentView={currentView}\n      />\n\n      <div className=\"year-list\" css={yearListStyle}>\n        {genYearNodeAry()}\n      </div>\n    </div>\n  );\n};\n","import { Calendar } from \"./Calendar\";\n\nconst MyCalendar = {\n  Calendar,\n};\nexport default MyCalendar;\n","/** @jsxImportSource @emotion/react */\nimport { useEffect, useState } from \"react\";\nimport { DateView } from \"./DateView/DateView\";\nimport { MonthView } from \"./MonthView/MonthView\";\nimport { CalendarType } from \"./types/CalendarType\";\nimport { ViewKind } from \"./types/ViewKind\";\nimport { YearView } from \"./YearView/YearView\";\n\nexport const Calendar: React.VFC<CalendarType> = ({ date, onSelect }) => {\n  let [today] = useState(new Date());\n  let [viewDate, setViewDate] = useState(new Date());\n  let [selectedDate, setSelectedDate] = useState<Date | string>(date);\n  let [currentView, setCurrentView] = useState<ViewKind>(\"DATE_VIEW\");\n\n  useEffect(() => {\n    /**\n     * @param year number-type. 4-digit number\n     * Notice: only use in this useEffect\n     */\n    function setViewDateByYearInUE(year: number) {\n      setViewDate(new Date(new Date(date).setFullYear(year)));\n    }\n\n    /**\n     *\n     * @param month number-type. 0~11\n     * Notice: only use in this useEffect\n     */\n    function setViewDateByMonthInUE(month: number) {\n      setViewDate(new Date(new Date(date).setMonth(month)));\n    }\n    setSelectedDate(date);\n\n    if (date !== \"\") {\n      setViewDateByYearInUE(new Date(date).getFullYear());\n      setViewDateByMonthInUE(new Date(date).getMonth());\n    }\n  }, [date]);\n\n  /**\n   * 同時設定自身 component 和外部元件傳進來的值，\n   * 目的是當自身 component設定值時，能觸發外部元件的值跟自身元件一樣\n   */\n  function toSelectDate(val: Date | string) {\n    setSelectedDate(val);\n    onSelect(\n      val instanceof Date ? Intl.DateTimeFormat(\"fr-CA\").format(val) : \"\"\n    );\n  }\n\n  function previousMonth() {\n    setViewDate(new Date(viewDate.setMonth(viewDate.getMonth() - 1)));\n  }\n\n  function nextMonth() {\n    setViewDate(new Date(viewDate.setMonth(viewDate.getMonth() + 1)));\n  }\n\n  function previousYear() {\n    setViewDate(new Date(viewDate.setFullYear(viewDate.getFullYear() - 1)));\n  }\n\n  function nextYear() {\n    setViewDate(new Date(viewDate.setFullYear(viewDate.getFullYear() + 1)));\n  }\n\n  function previousTenYears() {\n    setViewDate(new Date(viewDate.setFullYear(viewDate.getFullYear() - 10)));\n  }\n\n  function nextTenYears() {\n    setViewDate(new Date(viewDate.setFullYear(viewDate.getFullYear() + 10)));\n  }\n\n  /**\n   * @param year number-type. 4-digit number\n   * Notice: use in child component\n   */\n  function setViewDateByYear(year: number) {\n    setViewDate(new Date(viewDate.setFullYear(year)));\n  }\n\n  /**\n   *\n   * @param month number-type. 0~11\n   * Notice: use in child component\n   */\n  function setViewDateByMonth(month: number) {\n    setViewDate(new Date(viewDate.setMonth(month)));\n  }\n\n  function setPrevView(currView: string) {\n    switch (currView) {\n      case \"MONTH_VIEW\": {\n        setCurrentView(\"YEAR_VIEW\");\n        break;\n      }\n      case \"DATE_VIEW\": {\n        setCurrentView(\"MONTH_VIEW\");\n        break;\n      }\n      case \"YEAR_VIEW\": {\n        break;\n      }\n      default: {\n        // others, set to dismiss all views\n        setCurrentView(\"\");\n        break;\n      }\n    }\n  }\n\n  function setNextView(currView: string) {\n    switch (currView) {\n      case \"YEAR_VIEW\": {\n        setCurrentView(\"MONTH_VIEW\");\n        break;\n      }\n      case \"MONTH_VIEW\": {\n        setCurrentView(\"DATE_VIEW\");\n        break;\n      }\n      case \"DATE_VIEW\": {\n        break;\n      }\n      default: {\n        // others, set to dismiss all\n        setCurrentView(\"\");\n        break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <DateView\n        prevAct={previousMonth}\n        nextAct={nextMonth}\n        info={`${viewDate\n          .toLocaleString(\"en-US\", {\n            month: \"long\",\n          })\n          .substr(0, 3)} ${viewDate.toLocaleString(\"en-US\", {\n          year: \"numeric\",\n        })}`}\n        viewDate={viewDate}\n        selectedDate={selectedDate}\n        toSelectDate={toSelectDate}\n        today={today}\n        setPrevView={setPrevView}\n        setNextView={setNextView}\n        currentView={currentView}\n      />\n      <MonthView\n        info={`${viewDate.toLocaleString(\"en-US\", { year: \"numeric\" })}`}\n        prevAct={previousYear}\n        nextAct={nextYear}\n        viewDate={viewDate}\n        selectedDate={selectedDate}\n        setPrevView={setPrevView}\n        setNextView={setNextView}\n        currentView={currentView}\n        setViewDateByMonth={setViewDateByMonth}\n      />\n      <YearView\n        prevAct={previousTenYears}\n        nextAct={nextTenYears}\n        info={\"\"}\n        selectedDate={selectedDate}\n        viewDate={viewDate}\n        setPrevView={setPrevView}\n        setNextView={setNextView}\n        currentView={currentView}\n        setViewDateByYear={setViewDateByYear}\n      />\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Calendar from \"./components/Calendar\";\n\nfunction App() {\n  let [selectedDate, setSelectedDate] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <input\n        type=\"date\"\n        onChange={(e) => setSelectedDate(e.target.value)}\n        value={selectedDate}\n        pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n      />\n      <Calendar.Calendar\n        date={selectedDate}\n        onSelect={setSelectedDate}\n      ></Calendar.Calendar>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"react-app-polyfill/ie11\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}